<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Surfing the code</title>
    <link>https://atsvetkov.github.io/post/</link>
    <description>Recent content in Posts on Surfing the code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Dec 2016 21:40:04 +0100</lastBuildDate>
    <atom:link href="https://atsvetkov.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Coffee and Links - 3</title>
      <link>https://atsvetkov.github.io/2016/12/coffee-and-links---3/</link>
      <pubDate>Fri, 16 Dec 2016 21:40:04 +0100</pubDate>
      
      <guid>https://atsvetkov.github.io/2016/12/coffee-and-links---3/</guid>
      <description>


&lt;figure &gt;
    
        &lt;img src=&#34;https://atsvetkov.github.io/images/coffee-and-links-3.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;news:50d2f2ba86e07cf7d8879fd54889a47b&#34;&gt;News&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bloomberg.com/news/articles/2016-12-13/alphabet-creates-new-self-driving-car-business-called-waymo&#34;&gt;Google keeps working on self-driving cars&lt;/a&gt;, now as &lt;a href=&#34;https://waymo.com/&#34;&gt;Waymo&lt;/a&gt;, a separate company under &lt;a href=&#34;https://abc.xyz/&#34;&gt;Alphabet&lt;/a&gt;. It&amp;rsquo;s also interesting to read &lt;a href=&#34;https://www.bloomberg.com/news/features/2016-12-08/google-makes-so-much-money-it-never-had-to-worry-about-financial-discipline&#34;&gt;about the changes in Google&amp;rsquo;s business and internal projects during last years&lt;/a&gt;. Despite all the experiments they are doing, a major part of the revenue still comes from advertising. But company leaders claim that this as a tool to achieve more significant goals rather than a goal on its own.&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://atsvetkov.github.io/images/google_revenue.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon rethinks shopping with &lt;a href=&#34;https://www.amazon.com/b?node=16008589011&#34;&gt;Amazon Go&lt;/a&gt;, getting wireless payments to the next level. I can&amp;rsquo;t wait for this to become mainstream!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Yahoo reveals that &lt;a href=&#34;https://www.wired.com/2016/12/yahoo-hack-billion-users/&#34;&gt;1 billion user accounts were compromised&lt;/a&gt;, making it &lt;em&gt;&amp;ldquo;the biggest known hack of user data ever&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Microsoft wants us to &lt;a href=&#34;http://www.theverge.com/2016/12/13/13935136/microsoft-cortana-windows-10-iot-devices&#34;&gt;talk to fridges and toasters&lt;/a&gt;, integrating Cortana into home devices. Yeah, why not. &lt;em&gt;Hey, fridge, how much beer is left?&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;languages-and-frameworks:50d2f2ba86e07cf7d8879fd54889a47b&#34;&gt;Languages and frameworks&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you are already preparing your New Year resolutions and catching up with JavaScript is on the list, then you might want to check &lt;a href=&#34;https://medium.com/javascript-scene/top-javascript-frameworks-topics-to-learn-in-2017-700a397b711#.qe16jz7ue&#34;&gt;Top JavaScript Frameworks &amp;amp; Topics to Learn in 2017&lt;/a&gt;. Quite opinionated view, but makes a lot of sense. Choosing between top contenders, Angular 2 and Recat, personally I&amp;rsquo;d bet on and invest into the latter. And if you feel fed up with JavaScript frameworks, maybe refresh the core skills by taking &lt;a href=&#34;https://javascript30.com/&#34;&gt;free 30-day vanilla JavaScript course&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At some point most .NET developers have to deal with &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/f7ykdhsy.aspx&#34;&gt;reflection&lt;/a&gt;. And very soon after that they learn that reflection API is slow (by design) and has to be used with caution. &lt;a href=&#34;http://mattwarren.org/2016/12/14/Why-is-Reflection-slow/&#34;&gt;Matt Warren explains why and shows some benchmarks&lt;/a&gt;, demonstrating that, for instance, calling a property getter through a delegate is 8 times slower than the direct invocation, while calling it through reflection is 900 times slower. Always good to be aware of the relative speed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tools:50d2f2ba86e07cf7d8879fd54889a47b&#34;&gt;Tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://benchmarkdotnet.org/&#34;&gt;BenchmarkDotNet&lt;/a&gt; is an open-source .NET benchmarking library by same Matt Warren, which allows to measure performance of specific methods by marking them with a special attribute and then passing to the benchmark runner class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Md5VsSha256
{
    ...
    [Benchmark]
    public byte[] Sha256()
    {
        return sha256.ComputeHash(data);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;var summary = BenchmarkRunner.Run&amp;lt;Md5VsSha256&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Speaking about performance in .NET, too many memory allocations might create a lot of pressure on garbage collector, which will result in frequent collections, stealing precious CPU time. Obviously, some allocations are necessary (like when you are actually *new*ing up an instance of a class), but some are less obvious and can be avoided (boxing, expressions, method arguments marked as &lt;em&gt;params&lt;/em&gt; etc.). &lt;a href=&#34;http://resharper-plugins.jetbrains.com/packages/Resharper.HeapView.R90/&#34;&gt;ReSharper Heap Allocation plugin&lt;/a&gt; (or, if you are not using ReSharper, &lt;a href=&#34;https://github.com/Microsoft/RoslynClrHeapAllocationAnalyzer&#34;&gt;Roslyn CLR Heap Allocation Analyzer&lt;/a&gt;) will highlight all memory allocations, so that you can at least see and evaluate them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://atsvetkov.github.io/images/resharper_heap_allocations.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;fun:50d2f2ba86e07cf7d8879fd54889a47b&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;With &lt;a href=&#34;http://radio.garden/live/zoersel/zoe/&#34;&gt;Radio Garden&lt;/a&gt; you can rotate the globe and pick one of the radio stations playing at a certain geographic point. Pretty cool for someone living abroad and feeling homesick.&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://atsvetkov.github.io/images/radio_garden.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;True emoji should be text-only, so get creative with &lt;a href=&#34;https://ascii.li/emoticon-creator&#34;&gt;Text Emoticon Generator&lt;/a&gt;!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;╮(•‿•)╭
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There are &lt;a href=&#34;http://www.internetlivestats.com/total-number-of-websites/&#34;&gt;over 1 billion websites&lt;/a&gt; on the World Wide Web today and the total amount of data online is measured in &lt;a href=&#34;https://en.wikipedia.org/wiki/Exabyte&#34;&gt;exabytes&lt;/a&gt;. So it is particularly funny to see that &lt;a href=&#34;https://twitter.com/workergnome/status/807704855276122114&#34;&gt;the map of the Internet as of May 1973&lt;/a&gt; would fit on a single sheet of paper.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other:50d2f2ba86e07cf7d8879fd54889a47b&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://techbeacon.com/how-best-organize-agile-teams-build-around-autonomy-mastery-purpose&#34;&gt;This article about organizing agile teams&lt;/a&gt; really resonated with me. I totally agree with the author that good teams are self-sufficient, internally motivated and driven by their own desire to deliver something meaningful.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;That’s because people don&amp;rsquo;t work to be agile. People work for their satisfaction. Often, autonomy, mastery, and purpose will satisfy them. Keep people satisfied at the personal level and they will provide the results you want in their team.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How do you estimate the total number of German tanks only having several ones captured? &lt;a href=&#34;https://en.wikipedia.org/wiki/German_tank_problem&#34;&gt;An fascinating application of statistical theory to a very specific problem during World War II&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;TED is publishing a link to a selected talk every day in December, calling it &lt;a href=&#34;http://www.tedxbasel.com/txb-blog/?tag=31+days+of+ideas&#34;&gt;31 days of ideas&lt;/a&gt;. A nice and not-too-time-consuming way to learn ideas from various areas and get inspired. Highly recommended for broadening your horizons.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Practice makes perfect</title>
      <link>https://atsvetkov.github.io/2016/12/practice-makes-perfect/</link>
      <pubDate>Tue, 06 Dec 2016 21:50:43 +0100</pubDate>
      
      <guid>https://atsvetkov.github.io/2016/12/practice-makes-perfect/</guid>
      <description>
&lt;figure &gt;
    
        &lt;img src=&#34;https://atsvetkov.github.io/images/practice_makes_perfect.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;blockquote&gt;
&lt;p&gt;Contrary to what you might believe, merely doing your job every day doesn&amp;rsquo;t qualify as real practice. Going to meetings isn&amp;rsquo;t practicing your people skills, and replying to mail isn&amp;rsquo;t practicing your typing. You have to set aside some time once in a while and do focused practice in order to get better at something.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(&lt;em&gt;Steve Yegge, &lt;a href=&#34;https://sites.google.com/site/steveyegge2/practicing-programming&#34;&gt;Practicing Programming&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;I couldn&amp;rsquo;t agree more. More often than not we developers tend to write code only during working hours. It&amp;rsquo;s about eight hours and (hopefully) most of those are spent &lt;em&gt;actually&lt;/em&gt; programming, so that seems quite enough, right?&lt;/p&gt;

&lt;p&gt;Wrong!&lt;/p&gt;

&lt;p&gt;Well, of course, it depends. We all have lives and keeping the work-life balance is arguably more important than anything else (I am absolutely going to write a separate post about this). But still most great developers became great through constant practice, often outside of working hours. And if you think about it, this is quite normal for other professions, like doctors or musicians. From the same article:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I have trouble thinking of any modestly difficult profession in which continuous study and practice aren&amp;rsquo;t the norm. Fighter pilots train in simulators before getting into the latest jet. Actors and politicians practice their lines and their smiles. Opera troupes do mock performances before public appearances. Writers, poets, and artists attend workshops, and study the work of the Masters.&lt;/p&gt;

&lt;p&gt;Everyone practices &amp;ndash; everyone, that is, except for us. We just grind stuff out, day in, day out. Are you as embarrassed about the state of our profession as I am?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I always compare it to running. Do you join a competition right away or you practice first? Do you run marathons without training between them? And, in my opinion, all of this is applicable to programming: every minute of focused practice trains your abstract thinking muscle and makes it easier to turn mental models into working code next time you actually need it.&lt;/p&gt;

&lt;p&gt;So, how to practice?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Jeff Atwood has &lt;a href=&#34;https://blog.codinghorror.com/the-ultimate-code-kata/&#34;&gt;a blog post exactly about this&lt;/a&gt;, where he gives some good advice on this matter. Using &lt;em&gt;coding kata&lt;/em&gt; is a well-known approach to learn TDD, a famous &lt;a href=&#34;http://osherove.com/tdd-kata-1/&#34;&gt;String Calculator&lt;/a&gt; being one of the most popular. There are &lt;a href=&#34;http://codekata.com/&#34;&gt;many&lt;/a&gt; &lt;a href=&#34;https://github.com/garora/TDD-Katas&#34;&gt;other&lt;/a&gt; similar resources, even &lt;a href=&#34;http://www.codekatas.org/casts/tagged/csharp&#34;&gt;a site with code kata video casts&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.exercism.io/&#34;&gt;Exercism&lt;/a&gt;, an interesting project which allows you to practise in solving programming problems in various popular languages (personally, I started learning &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; on this site some time ago).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://projecteuler.net/&#34;&gt;Project Euler&lt;/a&gt; was created in 2001 and is still a very popular source of challenging mathematical/programming problems. These can be quite hard and will require you to brush up your algorithms/data structures skills. I did solve some, but was never too serious about that, which left me with only 17 out of 570 problems finished so far (perhaps I should add the rest to my New Year resolutions).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://projecteuler.net/profile/atsvetkov.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;And here&amp;rsquo;s a bonus link, my favourite at the moment: &lt;a href=&#34;http://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt;, a set of programming puzzles for each day of December until Christmas. Every day a new one is unlocked, just like in any advent calendar, and the problems themselves are described in a hilarious way, which definitely makes it fun to work on them. Who wouldn&amp;rsquo;t want to help Santa using your programming skills?&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://atsvetkov.github.io/images/advent_of_code.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I only found this site two days ago, so there are already several puzzles to catch up, but this is a really fun way of practicing. Will definitely keep going and encourage you to check it out too.&lt;/p&gt;

&lt;p&gt;As Neil Gaiman said, &lt;em&gt;&amp;ldquo;you learn by finishing things&amp;rdquo;&lt;/em&gt;, so just doing one small programming exercise (non work-related!) a day will be of great help on your road to mastery.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Coffee and Links - 2</title>
      <link>https://atsvetkov.github.io/2016/11/coffee-and-links---2/</link>
      <pubDate>Sat, 19 Nov 2016 14:17:47 +0100</pubDate>
      
      <guid>https://atsvetkov.github.io/2016/11/coffee-and-links---2/</guid>
      <description>

&lt;p&gt;This was a week of &lt;a href=&#34;https://connectevent.microsoft.com&#34;&gt;Microsoft Connect 2016&lt;/a&gt;, an event where yet another bunch of cool announcements were made. However, being a good software engineer means not restricting yourself to a single technology, so I have some awesome non-Microsoft things to share as well. Let&amp;rsquo;s jump straight in!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://atsvetkov.github.io/images/coffee-and-links-2.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;news:a6f47d7b0d5949289cd8b4afb382f02b&#34;&gt;News&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Microsoft used to be one of those companies on the far end on the &amp;ldquo;opensourceness&amp;rdquo; spectrum, and .NET itself seemed to be almost an antonim of &amp;ldquo;open source&amp;rdquo;. These days are gone! Just look at this: &lt;a href=&#34;https://techcrunch.com/2016/11/16/microsoft-joins-the-linux-foundation/&#34;&gt;Microsoft is joining the Linux Foundation&lt;/a&gt;, while &lt;a href=&#34;https://cloudplatform.googleblog.com/2016/11/Google-Cloud-to-join-NET-Foundation-Technical-Steering-Group.html&#34;&gt;Google is joining the .NET Foundation&lt;/a&gt;. Generally this means that both companies are getting more and more committed to contributing to the open source tools and products from both worlds, which is amazing news for all developers. It is not that crazy or surprising, though, given that &lt;a href=&#34;https://azure.microsoft.com/en-us/blog/powershell-is-open-sourced-and-is-available-on-linux/&#34;&gt;PowerShell now runs on Linux&lt;/a&gt;, &lt;a href=&#34;https://insights.ubuntu.com/2016/11/16/microsoft-loves-linux-ubuntu-available-on-sql-server-public-preview&#34;&gt;SQL Server preview runs on Ubuntu&lt;/a&gt; and &lt;a href=&#34;https://cloudplatform.googleblog.com/2016/08/making-ASP.NET-apps-first-class-citizens-on-Google-Cloud-Platform.html&#34;&gt;Google Cloud supports ASP.NET web applications&lt;/a&gt;. It&amp;rsquo;s all so mixed up now&amp;hellip; which is awesome!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Visual Studio 2017 Release Candidate (formerly known as Visual Studio 15) &lt;a href=&#34;https://msdn.microsoft.com/magazine/mt790181&#34;&gt;is now available&lt;/a&gt;. There are lots of productivity and performance improvements, for example, solutions and projects should be loading 2-4 times faster than in VS 2015. I&amp;rsquo;m really looking forward to it, as well as to the &lt;a href=&#34;https://msdn.microsoft.com/magazine/mt790184&#34;&gt;new language features of C# 7.0&lt;/a&gt;. And finally there is &lt;a href=&#34;https://msdn.microsoft.com/magazine/mt790182&#34;&gt;Visual Studio for Mac&lt;/a&gt;! Not that I am personally going to use it, but it is just cool to see how Microsoft can leverage existing open-source tools to expand into the new market (VS for Mac is built on top of &lt;a href=&#34;http://www.monodevelop.com/&#34;&gt;MonoDevelop&lt;/a&gt; and VS Code - on top of &lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/webdev/2016/11/16/announcing-asp-net-core-1-1/&#34;&gt;ASP.NET Core 1.1&lt;/a&gt; is released, featuring even higher performance rating on &lt;a href=&#34;https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/&#34;&gt;TechEmpower&lt;/a&gt;, URL rewriting, response caching, Web Listener server on Windows (can be used instead of Kestrel to utilize Windows-specific features) and more. It is still based on project.json file, but there are already working on switching back to .csproj and msbuild - a much improved version of a familiar tooling (more details on the alpha version of this &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2016/11/16/announcing-net-core-tools-msbuild-alpha/&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Jimmy Bogard, the creator of &lt;a href=&#34;https://github.com/AutoMapper/AutoMapper&#34;&gt;AutoMapper&lt;/a&gt; and &lt;a href=&#34;https://github.com/jbogard/MediatR&#34;&gt;MediatR&lt;/a&gt;, has updated his sample project &lt;a href=&#34;https://github.com/jbogard/contosouniversitycore&#34;&gt;Contoso University&lt;/a&gt; to .NET Core. It shows how to use all these fancy tools together, applying &lt;a href=&#34;http://martinfowler.com/bliki/CQRS.html&#34;&gt;CQRS&lt;/a&gt; pattern and NOT overengineering the solution structure (Jimmy is a big advocate of using a simpler setup and &lt;a href=&#34;https://lostechies.com/jimmybogard/2012/08/30/evolutionary-project-structure/&#34;&gt;preferring folders over projects for layering&lt;/a&gt;). I really like the way he looks into the common software development problems and finds reasonable no-nonsense solutions. He is also an excellent speaker, so when you have time, watch some of his &lt;a href=&#34;https://vimeo.com/search?q=jimmy+bogard&#34;&gt;NDC talks&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;languages-and-frameworks:a6f47d7b0d5949289cd8b4afb382f02b&#34;&gt;Languages and frameworks&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://programming.witheve.com/&#34;&gt;Eve: Programming designed for humans&lt;/a&gt; - quite an unusual approach to designing a programming language and an IDE together to provide a unique and human-friendly experience. Perhaps not for every project, but certainly interesting for some.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt;, yet another JavaScript framework rapidly gaining popularity, &lt;a href=&#34;https://medium.com/the-vue-point/vue-2-0-is-here-ef1f26acf4b8#.w0mmh55at&#34;&gt;has recently got a new 2.0 release&lt;/a&gt;. I like the philosophy behind it, especially the idea of a &lt;em&gt;progressive framework&lt;/em&gt;, which allows you to start quickly with the smallest subset of features and only add more when your application has grown big enough. The author, Evan You, explains this nicely in &lt;a href=&#34;https://www.youtube.com/watch?v=pBBSp_iIiVM&#34;&gt;his talk at UtahJS conference&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you want more functional programming features in your .NET code, but switching to F# is not an option, there is &lt;a href=&#34;https://github.com/louthy/language-ext&#34;&gt;C# Functional Language Extensions&lt;/a&gt; project to the rescue. Using &lt;a href=&#34;http://geekswithblogs.net/BlackRabbitCoder/archive/2015/04/16/c.net-little-wonders-static-using-statements-in-c-6.aspx&#34;&gt;static usings from C# 6.0&lt;/a&gt; in a clever way, this library allows you to write code that looks and feels pretty much like F# or any other functional language:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;int&amp;gt; items = List(1,2,3,4,5); // static method as constructor function instead of your typical &#39;new List&#39;
var x = map(opt, v =&amp;gt; v * 2); // static method to mimic a globally available &#39;map&#39; function as a primitive
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tools:a6f47d7b0d5949289cd8b4afb382f02b&#34;&gt;Tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Even in the latest version the IIS Manager tool still looks terribly outdated and doesn&amp;rsquo;t exactly provide a nice user experience. Fear not! There is now a new web-based tool for managing IIS, which provides a full-blown REST API and a default Angular-based web UI for that purpose. Check out the &lt;a href=&#34;https://blogs.iis.net/adminapi/microsoft-iis-administration-api-preview&#34;&gt;Microsoft IIS Administration Preview&lt;/a&gt;. This looks so much more like it&amp;rsquo;s 2016 today, doesn&amp;rsquo;t it?

&lt;figure &gt;
    
        &lt;img src=&#34;https://atsvetkov.github.io/images/iis_manager_preview.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun:a6f47d7b0d5949289cd8b4afb382f02b&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&amp;ldquo;90% of everything is crap&amp;rdquo;&lt;/em&gt;, &lt;em&gt;&amp;ldquo;Communication usually fails, except by accident&amp;rdquo;&lt;/em&gt; and other wittyful observations in &lt;a href=&#34;https://www.exceptionnotfound.net/15-fundamental-laws-of-the-internet/?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+ExceptionNotFound+%28Exception+Not+Found%29&#34;&gt;15 Fundamental Laws of the Internet&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Some kind of Google neural network will try to recognize what you are drawing: &lt;a href=&#34;https://quickdraw.withgoogle.com/&#34;&gt;Quick, draw!&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other:a6f47d7b0d5949289cd8b4afb382f02b&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bravenewgeek.com/you-are-not-paid-to-write-code&#34;&gt;You are not paid to write code&lt;/a&gt; - a very nice read about the essence of programming and risks of having engineers build and maintain systems just for the sake of systems, not to solve a real business problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;But if you set up a system, you are likely to find your time and effort now being consumed in the care and feeding of the system itself. New problems are created by its very presence. Once set up, it won&amp;rsquo;t go away, it grows and encroaches.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;P.S. Usually I write these posts in VS Code, just because the whole blog is stored in a github repository, so it is kind of natural to treat is as a code base. However, I always enjoy pushing myself out of the comfort zone and optimizing the coding experience. That&amp;rsquo;s why I am now learning to use &lt;a href=&#34;http://www.vim.org&#34;&gt;Vim&lt;/a&gt;, a text editor which is more common in Unix OS, but can be used anywhere. The general idea, as I see it, is to keep your fingers on the home row of the keyboard and minimize unnecessary movement. Learning curve is quite steep, but the benefits are tempting. So in fact this entire post has been authored in Vim (at least doubling the writing time)! And you don&amp;rsquo;t necesssarily have to use the old-school console version, there is &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=JaredParMSFT.VsVim&#34;&gt;an extension for Visual Studio&lt;/a&gt; and &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscodevim.vim&#34;&gt;one for Visual Studio Code too&lt;/a&gt;, which emulate Vim-like keybindings. Check it out and don&amp;rsquo;t forget: to quit Vim, you type &lt;code&gt;:wq!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://atsvetkov.github.io/images/twitter_vi.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Coffee and Links - 1</title>
      <link>https://atsvetkov.github.io/2016/11/coffee-and-links---1/</link>
      <pubDate>Sat, 12 Nov 2016 15:00:54 +0100</pubDate>
      
      <guid>https://atsvetkov.github.io/2016/11/coffee-and-links---1/</guid>
      <description>

&lt;p&gt;Sometimes I find interesting things on the web, which don&amp;rsquo;t belong to a single category. Just random articles or news about technology. Since I still want to share these findings and because I normally do this kind of reading at the start of the day, I will be publishing this as a &lt;em&gt;Coffee and links&lt;/em&gt; digest.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://atsvetkov.github.io/images/coffee-and-links-1.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;news:fbb698e32b13c0b0f7d47212fe99a1fb&#34;&gt;News&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blogs.technet.microsoft.com/hybridcloud/2016/09/26/announcing-the-launch-of-windows-server-2016/&#34;&gt;This autumn Microsoft has launched Windows Server 2016&lt;/a&gt;, with lots of improvements and new features, like &lt;a href=&#34;https://blog.docker.com/2016/09/build-your-first-docker-windows-server-container/&#34;&gt;containers support&lt;/a&gt; (Docker containers can now natively run on Windows) and &lt;a href=&#34;https://technet.microsoft.com/en-us/windows-server-docs/get-started/getting-started-with-nano-server&#34;&gt;a lightweight GUI-less version called &lt;em&gt;Nano Server&lt;/em&gt;&lt;/a&gt; (small, fast, and perfect as a hosting platform).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Another thing from Microsoft: a new communication platform called &lt;a href=&#34;https://products.office.com/en-us/microsoft-teams/group-chat-software&#34;&gt;Microsoft Teams&lt;/a&gt;, which seems to target the market where &lt;a href=&#34;https://slack.com/&#34;&gt;Slack&lt;/a&gt; dominates, but has an additional benefit of Office 365 integration. Slack was apparently so scared with this announcement that they posted a public letter to Microsoft, written in a condescending tone and reminding &lt;a href=&#34;http://aaplinvestors.net/marketing/seriously/&#34;&gt;a famous welcoming letter from Apple to IBM published in Wall Street Journal in 1981&lt;/a&gt;. Some people think that &lt;a href=&#34;http://www.theverge.com/2016/11/3/13504932/slack-microsoft-teams-letter-wtf&#34;&gt;Slack will regret doing this&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you have ever passed any Microsoft certification exams, this one might be interesting for you: Microsoft has partnered with &lt;a href=&#34;https://www.youracclaim.com/&#34;&gt;Acclaim&lt;/a&gt; to provide &lt;a href=&#34;https://www.microsoft.com/en-us/learning/badges.aspx#mcsa&#34;&gt;a digital badges system&lt;/a&gt; for displaying your certification status. &lt;a href=&#34;https://www.youracclaim.com/badges/e7345db9-f7c8-4727-b020-3aeceb39b3d6/public_url&#34;&gt;Showing off has never been easier!&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://atsvetkov.github.io/images/AcclaimBadge.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you are still looking into where and how to start using .NET Core, Jon Hilton found a bunch of sample projects to look into and learn from (here&amp;rsquo;s &lt;a href=&#34;https://jonhilton.net/2016/10/12/learning-dotnet-core-by-example/&#34;&gt;part 1&lt;/a&gt; and &lt;a href=&#34;https://jonhilton.net/2016/11/03/learn-dot-net-core-by-example-part-ii/&#34;&gt;part 2&lt;/a&gt;). I am definitely going to check these out.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2016/11/09/net-core-data-access/&#34;&gt;Lots of different databases and ORM frameworks already have support for .NET Core&lt;/a&gt;. Always interesting to see how people abuse (in a good way) different database systems: for example, &lt;a href=&#34;http://dontcodetired.com/blog/post/NET-Document-Databases-with-Marten&#34;&gt;Marten&lt;/a&gt; is a document database built on top of a relational one (&lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;). Actually, &lt;a href=&#34;https://octopus.com/blog/3.0-switching-to-sql&#34;&gt;in version 3.0 has Octopus Deploy migrated&lt;/a&gt; from &lt;a href=&#34;https://ravendb.net/&#34;&gt;RavenDB&lt;/a&gt; to SQL Server, but &lt;a href=&#34;https://octopus.com/blog/sql-as-document-store&#34;&gt;they creatively use it as a document storage too&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tools:fbb698e32b13c0b0f7d47212fe99a1fb&#34;&gt;Tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.pumascan.com/&#34;&gt;Puma&lt;/a&gt; is a security scanner for Visual Studio built on top of &lt;a href=&#34;https://github.com/dotnet/roslyn&#34;&gt;Roslyn&lt;/a&gt;, which can detect &lt;a href=&#34;https://www.owasp.org&#34;&gt;OWASP&lt;/a&gt; vulnerabilities by means of static code analysis. It can be installed into a single project as a &lt;a href=&#34;https://www.nuget.org/packages/Puma.Security.Rules/&#34;&gt;NuGet package&lt;/a&gt; or added globally as a &lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/80206c43-348b-4a21-9f84-a4d4f0d85007&#34;&gt;Visual Studio extension&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://intercoolerjs.org/&#34;&gt;Intercooler.js&lt;/a&gt; is an interesting attempt to simplify working with AJAX requests from client-side code. What if you could define which endpoint to call from the markup itself? No viewmodels needed, just like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;-- This anchor tag posts to &#39;/click&#39; when it is clicked --&amp;gt;
&amp;lt;a ic-post-to=&amp;quot;/click&amp;quot;&amp;gt; Click Me! &amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It allows you to make GET/POST requests, automatically render returned response as HTML inside the corresponding tag, easily integrate with the rest of your JavaScript code and much more (check out the &lt;a href=&#34;http://intercoolerjs.org/examples/index.html&#34;&gt;examples&lt;/a&gt;). Might be an interesting way of composing the elements of a web application into completely self-sufficient widgets. And it&amp;rsquo;s only 6.74KB gzipped.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun:fbb698e32b13c0b0f7d47212fe99a1fb&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Is there a single geek out there who has never played Pac-Man? If this brings up good memories from your childhood (it absolutely does for me), then you may want to read &lt;a href=&#34;http://www.gamasutra.com/view/feature/3938/the_pacman_dossier.php?print=1&#34;&gt;a history of the famous game and even some gameplay analysis&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other:fbb698e32b13c0b0f7d47212fe99a1fb&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sidbala.com/h-264-is-magic&#34;&gt;This is the best explanation of video compression I have ever read&lt;/a&gt;. It is not a trivial topic at all, but Sid Bala made it super easy to follow and understand with the help of carefully chosen words like &lt;em&gt;entropy&lt;/em&gt; and &lt;em&gt;mindfuck&lt;/em&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Some facts about WiX</title>
      <link>https://atsvetkov.github.io/2016/10/some-facts-about-wix/</link>
      <pubDate>Thu, 27 Oct 2016 22:20:54 +0200</pubDate>
      
      <guid>https://atsvetkov.github.io/2016/10/some-facts-about-wix/</guid>
      <description>&lt;p&gt;Before we start, let me ask you a question: do you know what is the oldest still active open source .NET project?&lt;/p&gt;

&lt;p&gt;Today I was again listening to awesome &lt;a href=&#34;https://www.dotnetrocks.com/&#34;&gt;.NET Rocks&lt;/a&gt; podcast and the guest was Rob Mensching, the guy behind &lt;a href=&#34;http://wixtoolset.org/&#34;&gt;Wix Toolset&lt;/a&gt;. WiX provides a bunch of tools to simplify the creation of MSI packages for Windows, and as far as I know, it is one of the most popular open-source implementations in that area. And it is also free! We use it for the product I am currently working on. Hell, even Microsoft is using it: &lt;a href=&#34;https://github.com/dotnet/cli/blob/rel/1.0.0/packaging/windows/clisdk/dotnet.wxs&#34;&gt;see for yourself&lt;/a&gt; that the current .NET Core installer is actually built with WiX! In fact, Rob Mensching used to work in Microsoft on setup and deployment for Office, Windows and Visual Studio. Obviously, he knows more about installers than most people do, enough to build a business around it. So he is now a CEO and a co-founder of &lt;a href=&#34;https://www.firegiant.com/&#34;&gt;Fire Giant&lt;/a&gt;, a company providing commercial support for WiX Toolset.&lt;/p&gt;

&lt;p&gt;In a nutshell, WiX allows to define the package contents and installation steps in a declarative way, using XML files like this (taken from &lt;a href=&#34;https://www.firegiant.com/wix/tutorial/getting-started/&#34;&gt;WiX documentation&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&#39;1.0&#39; encoding=&#39;windows-1252&#39;?&amp;gt;
&amp;lt;Wix xmlns=&#39;http://schemas.microsoft.com/wix/2006/wi&#39;&amp;gt;
    &amp;lt;Product Name=&#39;Foobar 1.0&#39; Manufacturer=&#39;Acme Ltd.&#39;
        Id=&#39;YOURGUID-86C7-4D14-AEC0-86416A69ABDE&#39; 
        UpgradeCode=&#39;YOURGUID-7349-453F-94F6-BCB5110BA4FD&#39;
        Language=&#39;1033&#39; Codepage=&#39;1252&#39; Version=&#39;1.0.0&#39;&amp;gt;
    &amp;lt;Package Id=&#39;*&#39; Keywords=&#39;Installer&#39; Description=&amp;quot;Acme&#39;s Foobar 1.0 Installer&amp;quot;
        Comments=&#39;Foobar is a registered trademark of Acme Ltd.&#39; Manufacturer=&#39;Acme Ltd.&#39;
        InstallerVersion=&#39;100&#39; Languages=&#39;1033&#39; Compressed=&#39;yes&#39; SummaryCodepage=&#39;1252&#39; /&amp;gt;

...

&amp;lt;Directory Id=&#39;ProgramFilesFolder&#39; Name=&#39;PFiles&#39;&amp;gt;
    &amp;lt;Directory Id=&#39;Acme&#39; Name=&#39;Acme&#39;&amp;gt;
        &amp;lt;Directory Id=&#39;INSTALLDIR&#39; Name=&#39;Foobar 1.0&#39;&amp;gt;

...

&amp;lt;Component Id=&#39;HelperLibrary&#39; Guid=&#39;YOURGUID-6BE3-460D-A14F-75658D16550B&#39;&amp;gt;
    &amp;lt;File Id=&#39;HelperDLL&#39; Name=&#39;Helper.dll&#39; DiskId=&#39;1&#39; Source=&#39;Helper.dll&#39; KeyPath=&#39;yes&#39; /&amp;gt;
&amp;lt;/Component&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, it can do much more than just that, but I&amp;rsquo;m not going into too much detail. Instead I encourage you to &lt;a href=&#34;https://www.dotnetrocks.com/?show=1367&#34;&gt;check out the podcast&lt;/a&gt; and learn something new about installers business in general and WiX in particular. I learned a couple of things I didn&amp;rsquo;t know before. First, there is a version 4 of WiX in development, which is a rewrite, so it should be better in all ways (&lt;a href=&#34;https://github.com/wixtoolset/wix4&#34;&gt;source code is available on GitHub&lt;/a&gt;). And second&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip;and the second new thing actually brings us to the question I asked in the beginning. Turns out that nobody really knows what &lt;em&gt;the&lt;/em&gt; oldest .NET open source project is, but WiX comes pretty damn close: it started in 1999 and was publicly released for the first time in 2004. So by any measure it is more than ten years old now! Two other pretty old and well-known ones are &lt;a href=&#34;http://www.nunit.org/&#34;&gt;NUnit&lt;/a&gt; in 2002 (a unit testing framework) and &lt;a href=&#34;http://www.mono-project.com/&#34;&gt;Mono&lt;/a&gt; in 2000-2001 (cross platform .NET framework that allowed to run C# and VB code on Linux long before &lt;a href=&#34;https://www.microsoft.com/net/core&#34;&gt;.NET Core&lt;/a&gt; came into being). Some discussions about those old open source projects took place in &lt;a href=&#34;https://twitter.com/robmen/status/692843420981661696&#34;&gt;this Rob&amp;rsquo;s tweet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I personally think this is exciting: although Microsoft has only recently started to move towards open-source community, the community itself has been around for more than a decade now and has built tons of great tools and products.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Current state of .NET</title>
      <link>https://atsvetkov.github.io/2016/10/current-state-of-.net/</link>
      <pubDate>Tue, 18 Oct 2016 22:22:41 +0200</pubDate>
      
      <guid>https://atsvetkov.github.io/2016/10/current-state-of-.net/</guid>
      <description>&lt;p&gt;Imagine a software developer working in a typical enterprise IT company. Let&amp;rsquo;s call him Johnny. Most of the time Johnny works with .NET applications. He&amp;rsquo;s been writing web apps since the days of ASP (he feels pretty comfortable with Web Forms and IIS after all these years), but he was always too busy doing &lt;em&gt;important things&lt;/em&gt; and never really had time to follow the news in the industry. Yeah, he heard some folks in another department are using &amp;ldquo;MVC&amp;rdquo;, and somebody mentioned something like &amp;ldquo;core&amp;rdquo; or &amp;ldquo;standard&amp;rdquo;. And some fellow .NET developers were even talking about Linux at the coffee machine. What? &lt;em&gt;.NET&lt;/em&gt; and &lt;em&gt;Linux&lt;/em&gt;? Weird!&lt;/p&gt;

&lt;p&gt;Or is it?&lt;/p&gt;

&lt;p&gt;Johhny feels that he might have been missing something important going on, but he is a bit afraid to ask his colleagues (after all, his title clear says he is a &lt;em&gt;Senior Developer&lt;/em&gt;). So Johhny arranges a meeting with Dave, his former colleague, who left the company a long time ago to join some fancy startup. In fact, Johnny thinks that Dave is a total hipster and a nerd obsessed with new shiny frameworks&amp;hellip; well, at least they are friends, so it&amp;rsquo;s OK to look less competent. So Johnny asks something like &amp;ldquo;what&amp;rsquo;s new in .NET&amp;rdquo; - and Dave opens a whole new world to him.&lt;/p&gt;

&lt;p&gt;What could be the most exciting new possibilities in today&amp;rsquo;s .NET ecosystem that Johnny learned about? Let&amp;rsquo;s look at Dave&amp;rsquo;s &lt;em&gt;Top 5 Reasons Why .NET Is So Awesome Today&lt;/em&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;.NET is now &lt;a href=&#34;https://github.com/dotnet/&#34;&gt;completely open-source&lt;/a&gt;. If you ever wondered how LINQ&amp;rsquo;s &lt;code&gt;Count()&lt;/code&gt; method worked, now you can &lt;a href=&#34;https://github.com/dotnet/corefx/blob/master/src/System.Linq/src/System/Linq/Count.cs&#34;&gt;look it up on GitHub&lt;/a&gt;. For example, you can see that before even trying to iterate the whole sequence (which might be time-consuming), they check if this sequence is actually a collection (which preserves a &amp;lsquo;Count&amp;rsquo; property), and if it is, then the collection&amp;rsquo;s &lt;code&gt;Count&lt;/code&gt; is returned, making it O(1) operation instead of O(n):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ICollection collection = source as ICollection;
if (collection != null)
{
    return collection.Count;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The newest version of the framework is called &lt;a href=&#34;https://www.microsoft.com/net/core/platform&#34;&gt;.NET Core&lt;/a&gt; and is completely cross-platform (not only you can &lt;a href=&#34;https://docs.asp.net/en/latest/publishing/linuxproduction.html&#34;&gt;run .NET apps on Linux&lt;/a&gt;, you can even have the &lt;a href=&#34;http://piotrgankiewicz.com/2016/10/17/net-on-linux-bye-windows-10/&#34;&gt;whole development environment on Linux too&lt;/a&gt;). And the new command-line tool &lt;code&gt;dotnet&lt;/code&gt; allows to &lt;a href=&#34;http://www.hanselman.com/blog/ExploringTheNewNETDotnetCommandLineInterfaceCLI.aspx&#34;&gt;scaffold, build and run the application on all platforms&lt;/a&gt;, just like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dotnet new
dotnet build
dotnet run
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blogs.microsoft.com/blog/2016/03/07/announcing-sql-server-on-linux&#34;&gt;SQL Server 2016 is going to run on Linux too&lt;/a&gt;, which is exciting news for the companies that want to reduce costs of licencing and hosting.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2016/08/24/whats-new-in-csharp-7-0/&#34;&gt;Next version of C# (7.0)&lt;/a&gt; will contain even more features inspired by functional languages: there will be &lt;a href=&#34;https://en.wikipedia.org/wiki/Pattern_matching&#34;&gt;pattern matching&lt;/a&gt;, real tuples, local functions and deconstruction syntax support. For example, we will be able to write code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Foo()
{
    // local function
    (string firstName, string secondName) GetTwo()
    {
            // returns a tuple
            return (&amp;quot;Johnny&amp;quot;, &amp;quot;Dave&amp;quot;);
    }


    // deconstruction into two variables at once
    (var first, var second) = GetTwo();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If just having functional features in an object-oriented language is not enough, you can easily switch to &lt;a href=&#34;http://fsharp.org/&#34;&gt;F#&lt;/a&gt;, a functional language for .NET platform. It is becoming more and more popular in the &lt;a href=&#34;http://tomasp.net/blog/2015/why-fsharp-in-2015/&#34;&gt;finance&lt;/a&gt; &lt;a href=&#34;https://fsharp.tv/gazettes/f-the-most-highly-paid-tech-worldwide-in-2016/&#34;&gt;industry&lt;/a&gt; and has frameworks for web development too, like &lt;a href=&#34;http://websharper.com/&#34;&gt;WebSharper&lt;/a&gt; and &lt;a href=&#34;https://suave.io/&#34;&gt;Suave&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Obviously this is just the tip of the iceberg. Johnny has a lot to catch up, but he already feels very much inspired. This is clearly not the same .NET world where he started his career many years ago: everything is changing and Microsoft is making .NET a very attractive platform for all kinds of applications. It&amp;rsquo;s a great time to be a .NET developer, so Johnny decides that he needs to meet with Dave more often, read more developer-oriented resources and also try some new shiny stuff out.&lt;/p&gt;

&lt;p&gt;Be like Johnny! Embrace change and learn amazing things!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(For some suggestions about which news to follow, take a look into my previous post about &lt;a href=&#34;https://atsvetkov.github.io/2016/10/staying-up-to-date-with-software-development-trends/&#34;&gt;Staying up-to-date with software development trends&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Staying up-to-date with software development trends</title>
      <link>https://atsvetkov.github.io/2016/10/staying-up-to-date-with-software-development-trends/</link>
      <pubDate>Sun, 16 Oct 2016 16:51:55 +0200</pubDate>
      
      <guid>https://atsvetkov.github.io/2016/10/staying-up-to-date-with-software-development-trends/</guid>
      <description>

&lt;p&gt;Earlier this year I was assigned to a role of a technical lead in a small development team. This happened after working in the same team for more than a year and then being a part of a two-person architecture team focused on evaluating the microservices approach for a couple of months. At my current employer things are changing quickly and people are free to figure out what the idea actually was. So I am still looking for the meaning of the tech lead role, but definitely enjoying it already.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;lead&lt;/em&gt; word in the role&amp;rsquo;s name assumes knowledge about how to write good software and other related things. In my opinion, this is a sum of three parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;taking responsibility&lt;/li&gt;
&lt;li&gt;applying experience&lt;/li&gt;
&lt;li&gt;constantly learning&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Part #1 is all about making a decision, taking a well-measured risk and being ready to fail. Evaluating the options and picking one with all potential consequences, be they good or bad - this is what makes a leader (I think I read this in &lt;a href=&#34;http://www.apress.com/9781590590171&#34;&gt;&lt;em&gt;Herding Cats: A Primer for Programmers Who Lead Programmers&lt;/em&gt; by J. Hank Rainwater&lt;/a&gt;). This is hard and needs to be supported by the organizational culture. Luckily, at my current company this is one of the core and officially promoted habits: &lt;em&gt;We make mistakes and learn&lt;/em&gt;. Which is also a life-saver for new hires - nothing encourages more than a feeling of a non-blaming atmosphere around.&lt;/p&gt;

&lt;p&gt;Part #2 may sound obvious, but in fact it has to be an explicit &lt;em&gt;action&lt;/em&gt;. Experience won&amp;rsquo;t manifest itself, you need to actively recognize a familiar pattern, a similar failure or success in the past. Again, the effectiveness of this may depend on the team spirit and organizational values. If there is no trust in the team, then people won&amp;rsquo;t feel like sharing their stories. And it is absolutely necessary to explain the why&amp;rsquo;s, not just make a statement. Compare &amp;ldquo;nooo, we shouldn&amp;rsquo;t use shared databases, everyone knows that&amp;rdquo; with &amp;ldquo;when we had a database shared by three apps on my last project, it resulted in regular deployment failures, finger-pointing and required a lot of cross-team communication&amp;rdquo;. I used to work with a super-smart developer, who also happens to be quite grumpy and hard-to-read. He would just say things like &amp;ldquo;Octopus Deploy? Bad idea. We tried it before, didn&amp;rsquo;t work out.&amp;rdquo; - and would not elaborate further. Statements like this don&amp;rsquo;t help, they only discourage others from trying something new, because &lt;em&gt;this guy probably has already tried this too and&amp;hellip; right, it was a bad idea&lt;/em&gt;. So applying experience may require surprisingly more communication and effort than one might expect. Buf if done right, this is what makes all the difference between a poor product and a great one. Because, you know, experience is just a list of mistakes you won&amp;rsquo;t make again.&lt;/p&gt;

&lt;p&gt;Now, I was originally going to write only about part #3 in this post, so let&amp;rsquo;s finally get to it! For me the best way to describe it would be the current slogan of &lt;a href=&#34;https://www.pluralsight.com/&#34;&gt;PluralSight&lt;/a&gt;, one of my favourite educational video platforms: &lt;em&gt;Smarter than yesterday&lt;/em&gt;. That is it. And this is what I&amp;rsquo;ve been trying to do so far in my career. You don&amp;rsquo;t need to go underwater for a year, memorize all GoF design patterns, complete tutorials for every JavaScript framework out there or read all the books on DDD. (One could argue that this would even be counter-productive, since learning abstract ideas without real-world practice will not really help in solving a real-world problem, at least not in our industry.) It is not too hard to read one good article every day, but it can help accumulate tremendous knowledge in the long run. What is also very important, in my opinion, is to get out of your comfort zone and look beyond your typical technology stack. I generally work with .NET web applications, and yet I try to follow the news and blogs on F#, Elixir, Go and node.js. Why? Because thinking in different languages makes me better understand familiar programming concepts and also learn completely new ones, which are not idiomatic to C#, for example. (And also because you never know what your next job might be.)&lt;/p&gt;

&lt;p&gt;In the previous paragraph I mentioned reading &lt;em&gt;good&lt;/em&gt; articles. The Internet is big, so searching for good stuff can be a daunting task. Most people end up with a relatively stable list of resources for daily/weekly reading. Here&amp;rsquo;s mine (not claiming to be unique or better than any other list):&lt;/p&gt;

&lt;h3 id=&#34;newsletters:3c736b6c1ec2b87278d89799f03977f6&#34;&gt;Newsletters&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://csharpdigest.net/&#34;&gt;C# Digest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://elixirdigest.net/&#34;&gt;Elixir Digest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://reactdigest.net/&#34;&gt;React Digest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sergeytihon.wordpress.com/&#34;&gt;F# Weekly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dddweekly.com/&#34;&gt;DDD Weekly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://azureweekly.info/&#34;&gt;Azure Weekly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plataformatec.com.br/elixir-radar&#34;&gt;Elixir Radar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golangweekly.com/&#34;&gt;Go Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.devopsweekly.com/&#34;&gt;DevOps Weekly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://webopsweekly.com/&#34;&gt;Web Operations Weekly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://microserviceweekly.com/&#34;&gt;Microservice Weekly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com/newsletter-subscription&#34;&gt;Docker Weekly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;blogs:3c736b6c1ec2b87278d89799f03977f6&#34;&gt;Blogs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/&#34;&gt;.NET Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/webdev/&#34;&gt;.NET Web Development and Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/visualstudioalm/&#34;&gt;Microsoft Application Lifecycle Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/blog/&#34;&gt;Microsoft Azure Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/visualstudio/&#34;&gt;The Visual Studio Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.visualstudio.com/blogs/&#34;&gt;Visual Studio Code Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hanselman.com/blog/&#34;&gt;Scott Hanselman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://odetocode.com/&#34;&gt;Ode to Code (K. Scott Allen)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://weblog.west-wind.com/&#34;&gt;Rick Strahl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://haacked.com/&#34;&gt;You&amp;rsquo;ve Been Haacked (Phil Haack)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://andrewlock.net/&#34;&gt;.NET Escapades (Andrew Lock)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://codeopinion.com/&#34;&gt;CodeOpinion (Derek Comartin)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.exceptionnotfound.net/&#34;&gt;Exception Not Found (Matthew P Jones)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jeffreyfritz.com/&#34;&gt;Fritz on the Web (Jeffrey Fritz)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kevinchalet.com/&#34;&gt;Kévin Chalet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://laurentkempe.com/&#34;&gt;Laurent Kempé&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leastprivilege.com/&#34;&gt;Dominick Baier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.talkingdotnet.com/&#34;&gt;Talking Dotnet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.rendle.io/&#34;&gt;The Codeface (Mark Rendle)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;podcasts:3c736b6c1ec2b87278d89799f03977f6&#34;&gt;Podcasts&lt;/h3&gt;

&lt;p&gt;There is only one item here, because my commute to work is quite short. But seriously, if you work in software development (especially in .NET) and you have time for one podcast only, it has to be &lt;a href=&#34;http://www.dotnetrocks.com/&#34;&gt;.NET Rocks&lt;/a&gt;. Richard and Carl are great hosts and their guests always happen to be exceptionally good at something. After so many shows their voices sound so familiar that I&amp;rsquo;m almost starting to think of them as my colleagues. And it is very likely that I will meet them alive on &lt;a href=&#34;http://ndc-london.com/&#34;&gt;NDC London 2017&lt;/a&gt; (which will probably be a reason for a separate post).&lt;/p&gt;

&lt;p&gt;This is not to say that everyday I follow &lt;em&gt;only these&lt;/em&gt; or &lt;em&gt;all of these&lt;/em&gt;, but this list seems to be the core of my reading and learning process. Let me know what your favourite learning resources are in the comments.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a blog with Hugo, GitHub, Travis-CI and DigitalOcean - Part 1</title>
      <link>https://atsvetkov.github.io/2016/08/building-a-blog-with-hugo-github-travis-ci-and-digitalocean---part-1/</link>
      <pubDate>Sun, 28 Aug 2016 23:01:21 +0200</pubDate>
      
      <guid>https://atsvetkov.github.io/2016/08/building-a-blog-with-hugo-github-travis-ci-and-digitalocean---part-1/</guid>
      <description>&lt;p&gt;&lt;em&gt;With great power comes great responsibility&lt;/em&gt;, they say. In case of being a programmer, this sometimes means that achieving simple things may get complicated. I understand that WordPress essentially won as the blogging platform and you can setup your hosted blog in almost no time&amp;hellip; but then where is all the fun? On the other hand, putting on a pragmatic programmer&amp;rsquo;s hat, I don&amp;rsquo;t really have time or desire to write my own blog engine either. So I was looking for some kind of a middle ground.&lt;/p&gt;

&lt;p&gt;To me the sweet spot seems to be in the static site generators: with this approach you usually get a high performance of a simple static site together with the beauty of Markdown, while still maintaining a freedom to choose how to store the sources and deploy the end result.&lt;/p&gt;

&lt;p&gt;Selecting a specific engine is just a matter of taste, I guess, as there are plenty of them these days. Checking out the &lt;a href=&#34;https://www.staticgen.com&#34;&gt;Top Open-Source Static Site Generators&lt;/a&gt; helped me a great deal to pick one. Most of the time I am a .NET developer (apparently not the most popular stack for blog engines, although there are &lt;a href=&#34;https://github.com/Code52/pretzel&#34;&gt;several&lt;/a&gt; &lt;a href=&#34;https://github.com/Wyamio/Wyam&#34;&gt;quite&lt;/a&gt; &lt;a href=&#34;https://github.com/mikoskinen/graze&#34;&gt;interesting&lt;/a&gt; &lt;a href=&#34;https://github.com/Kelindar/misakai-baker&#34;&gt;ones&lt;/a&gt;), but I am also starting to learn some &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; this year, so after some quick experiments I chose &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. The project has over 10K stars on GitHub and promises to &lt;em&gt;&amp;ldquo;make the web fun again&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Hugo (as well as most other static site generators) allows you to write posts in Markdown format, so you sources are very readable. It can then build your site, which will result in static HTML pages. This basically means that writing the posts is super easy, while serving the content is as fast as it can be, since there is no server-side processing involved. So, in the simplest workflow, you can write a post in Markdown, build the updated version of the site locally and then somehow copy the updated files to wherever the blog is hosted.&lt;/p&gt;

&lt;p&gt;Sounds easy, but not automated enough. Part of my daily job is maintaining Continuous Integration pipeline for multiple teams, so I would rather treat a blog as any other code, meaning that is needs to be source-controlled and hosting environment has to be automatically updated on every push. In the next part of this series I will explain how I achieved this using &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt;, &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt; and &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;DigitalOcean&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Never too late</title>
      <link>https://atsvetkov.github.io/2016/06/never-too-late/</link>
      <pubDate>Fri, 17 Jun 2016 22:52:13 +0200</pubDate>
      
      <guid>https://atsvetkov.github.io/2016/06/never-too-late/</guid>
      <description>&lt;p&gt;It wasn&amp;rsquo;t until this year that I decided to start blogging. A lot of things changed since moving from Russia to the Netherlands more than a year ago, in both life and work. At my current employer we are undergoing a tough and sometimes painful process of migrating our software architecture and development process to a presumably better state - and I am right in the middle of it. There are plenty discussions and experiments, some of them I hope might be worth sharing with the community.&lt;/p&gt;

&lt;p&gt;My initial goal is to write at least one post a week (feel free to poke me if I don&amp;rsquo;t). And I think in the actual first one (&lt;em&gt;every programmer&amp;rsquo;s posts should be zero-indexed, right?&lt;/em&gt;) I am going to describe the technical parts behind this very blog.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>